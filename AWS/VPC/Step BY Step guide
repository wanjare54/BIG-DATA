🧭 Step-by-Step Guide to Creating a VPC (Virtual Private Cloud) on AWS

✅ Step 1: Open VPC Dashboard
Navigate to VPC Dashboard in AWS.

Click Create VPC.

🛠 Step 2: VPC Settings Configuration
1. Resources to Create
You have two options:

VPC only: Only creates the VPC (used when you want full control).

VPC and more: Creates VPC + subnets + route tables + IGW + etc. (used for quick setup).

Selected: VPC only

📌 You are creating only the VPC manually. Other resources will be created separately.

2. Name Tag (Optional)
You can assign a Name to your VPC for easier identification.

Entered: my-vpc-01

🔖 This is just a tag; it helps you recognize the VPC in your dashboard.

3. IPv4 CIDR Block
You must specify the IPv4 CIDR range for the VPC.

Two options:

Manual input

Use IPAM (for managed IP assignments)

Selected: IPv4 CIDR manual input

Entered: 10.0.0.0/24

🧠 This means your VPC has 256 IP addresses (from 10.0.0.0 to 10.0.0.255). You can later divide this into subnets.

4. IPv6 CIDR Block
Options:

No IPv6 CIDR block

IPAM-allocated

Amazon-provided

Owned by me

Selected: No IPv6 CIDR block

🌐 You're not enabling IPv6 support in this VPC. You can add it later if needed.

▶️ Step 3: Create the VPC
Once you configure all fields:

Scroll down (not visible in the screenshot),

Click Create VPC.

AWS will now create the VPC with your specified settings.

🧠 Expert Tips
Naming Convention: Use consistent and descriptive names (dev-vpc, prod-vpc, etc.).

CIDR Range Planning:

Avoid overlap with existing VPCs or on-prem networks.

Use /16 for larger environments, /24 for limited test environments.

Security: Don’t forget to create subnets, route tables, internet gateways, and security groups after this.

Tagging: Add environment or department tags for cost tracking and automation.

============================================

✅ Step-by-Step Explanation of the VPC Details Page
✅ VPC Successfully Created
Confirmation Banner: Green message on top confirms the VPC creation.

VPC ID: vpc-0570638d9707bf308

Name: demo

🔍 Details Section Breakdown
Field	Description
State	✅ Available – Your VPC is ready to use.
Tenancy	Default – EC2 instances launched will use shared hardware.
IPv4 CIDR	10.0.0.0/16 – You've defined a large private IP space (65,536 IPs).
DHCP Option Set	Linked to manage DNS, NTP, etc.
DNS Resolution	✅ Enabled – Resources in this VPC can resolve domain names.
DNS Hostnames	❌ Disabled – EC2 instances won’t get public DNS by default. Enable if needed.
Main Route Table	rtb-0c2118c452894e981 – This route table is associated with the VPC by default.
Main Network ACL	acl-033d77d851107138c – Network Access Control List linked.
Default VPC	❌ No – This is a custom VPC, not the AWS-provided default.
Subnets	0 – You haven't created any subnets yet (next step).

🧭 What to Do Next (Post-VPC Creation)
Here are the essential steps to make your VPC usable:

🚧 Step 1: Create Subnets
Create at least one public and one private subnet.

Go to "Subnets" on the left > Click "Create subnet".

Choose this VPC (demo) and define CIDR blocks (e.g., 10.0.1.0/24 for public, 10.0.2.0/24 for private).

🌐 Step 2: Create and Attach Internet Gateway
Go to Internet Gateways > Click "Create Internet Gateway".

Name it demo-igw.

After creation, click "Actions" > "Attach to VPC" > Select your VPC.

🔄 Step 3: Update Route Table for Public Subnet
Go to Route Tables > Select the main one (rtb-...) or create a new one for public subnet.

Add a route: 0.0.0.0/0 → Target: your Internet Gateway (igw-xxx).

Associate the route table with your public subnet.

🔐 Step 4: Create Security Groups
Go to Security Groups > Create a new one or use default.

Open required ports like:

SSH (22) for Linux access

HTTP (80) or HTTPS (443) for web apps

🖥 Step 5: Launch EC2 Instances
Now you can launch EC2 instances and choose your custom VPC and subnets during setup.

🧠 Tips
Use tags (Environment: dev, Owner: your_name) for better resource management.

Enable DNS hostnames if you need public DNS for EC2.

Plan NAT Gateway if you want private subnets to access the internet securely.

=============================================

✅ Step-by-Step Review of Subnet Creation
🎉 Subnet Created Successfully
Confirmation: Green banner says: You have successfully created 1 subnet

Subnet Name: public

Subnet ID: subnet-0d8dd393c76dc9eee

VPC: vpc-0570638d9707bf308 (demo)

CIDR Block: 10.0.0.0/24

State: ✅ Available

This subnet covers 256 IPs (usable ~251) from 10.0.0.0 to 10.0.0.255

🛠️ What to Do Next – Subnet Setup Continuation
✅ Step 1: Make Subnet Public (Enable Auto-assign Public IPs)
To truly make this a public subnet, follow this:

Go to Subnets → Select your public subnet.

In the lower panel, click Actions → Modify auto-assign IP settings

✅ Check Auto-assign public IPv4 address

Click Save

💡 This ensures EC2 instances launched in this subnet will automatically get public IPs.

🌐 Step 2: Create and Attach an Internet Gateway
Go to Internet Gateways (left sidebar).

Click Create internet gateway → Name it like demo-igw.

After creation, click on it → Actions > Attach to VPC

Select your VPC (demo) and attach it.

📡 Step 3: Add Route for Internet Access
Go to Route Tables (left menu).

Select the route table associated with your public subnet.

Click Routes > Edit routes

Click Add route:

Destination: 0.0.0.0/0

Target: your Internet Gateway (igw-xxxx)

Save changes.

Now go to Subnet associations tab → Edit subnet associations

Ensure your public subnet is associated.

✅ This allows outbound internet access from the subnet.

🧠 Optional but Recommended
🔐 Step 4: Create Security Group (if not done yet)
Open port 22 for SSH and 80/443 for HTTP/HTTPS.


=============================================
✅ Step-by-Step Summary: Private Subnet Created
✔️ Subnet Details:
Name: Private

Subnet ID: subnet-07dc980b5064637c6

IPv4 CIDR: 10.0.1.0/24

VPC: vpc-0570638d9707bf308 (demo)

State: ✅ Available

🎯 This subnet is private because you will not associate it with a route to the internet gateway.

🔄 Next Steps: Make Private Subnet Functional
To allow outbound internet access from your private subnet (e.g., for software updates), you need to use a NAT Gateway.

🛠 Step 1: Create a NAT Gateway
Go to NAT Gateways (left menu)

Click Create NAT Gateway

Name it: demo-nat-gateway

Subnet: Select your public subnet

Elastic IP: Click Allocate Elastic IP and select it

Click Create NAT Gateway

🔄 This will take a few minutes to become available.

🧭 Step 2: Create a Custom Route Table for Private Subnet
Go to Route Tables

Click Create route table

Name: Private-RT

VPC: Select your VPC (demo)

Click Create

📌 Step 3: Add Route to NAT Gateway
Select the newly created route table (Private-RT)

Click Routes > Edit routes

Click Add route:

Destination: 0.0.0.0/0

Target: select your NAT Gateway

Save changes

🔗 Step 4: Associate Private Subnet with Route Table
In the same route table, go to Subnet associations

Click Edit subnet associations

Select the Private subnet

Save

✅ Now Your Setup Looks Like This:
Subnet Type	CIDR Block	Route to Internet	Public IP	Use Case
Public	10.0.0.0/24	via IGW	Yes	Web servers, bastion
Private	10.0.1.0/24	via NAT Gateway	No	Databases, app backends

=======================================================

✅ Step-by-Step: Attach Internet Gateway to VPC
📌 Current Status:
Internet Gateway ID: igw-0cffcbbb288f173f4

State: Detached ❌

Tag Name: igw_demo

✅ Step 1: Attach IGW to VPC
Click the “Attach to a VPC” button (green, top right in screenshot).

In the dialog:

Select your VPC (vpc-0570638d9707bf308, likely named demo)

Click Attach Internet Gateway

🔄 Once attached, the IGW will allow traffic to/from the internet for resources in your public subnet.

✅ Step 2: Add Route to IGW (Public Route Table)
Go to Route Tables in the left menu.

Select the main route table or a dedicated public route table (you can check which is associated with the public subnet).

Click the Routes tab → Edit Routes

Click Add Route:

Destination: 0.0.0.0/0

Target: Select your Internet Gateway (igw-xxxx)

Click Save changes

✅ Step 3: Ensure Public Subnet Has Public IPs
Go to Subnets > Select your public subnet.

Click Actions > Modify auto-assign IP settings

Enable: ✅ Auto-assign public IPv4 address

Save

This ensures any EC2 launched inside gets a public IP automatically.

🚀 After This Step, You Can:
Launch an EC2 instance in the public subnet.

SSH into it using the public IP.

Set up a bastion host to connect to your private subnet resources.

=============================

✅ What You’re Doing Here
You're attaching:

IGW ID: igw-0cffcbbb288f173f4 (igw_demo)

To VPC: vpc-0570638d9707bf308 (your custom VPC)

📌 Step-by-Step: Attach Internet Gateway
✔️ What to Do Now:
Confirm the VPC ID is correct (which it is ✅).

Click the orange button: Attach internet gateway.

🔄 This will change the state from Detached → Attached, allowing the VPC to route traffic to/from the internet.

✅ What’s Next After Attaching
Now that the IGW is attached:

Update the Route Table:

Go to Route Tables

Select the route table associated with the public subnet

Under Routes, click Edit routes

Add:

Destination: 0.0.0.0/0

Target: igw-0cffcbbb288f173f4

Save

Verify Public Subnet Has Auto-Assign IP:

Subnet > Modify auto-assign IP settings

✅ Enable Auto-assign public IPv4

------------------------------------------------

✅ 1. Create a VPC
VPC Name: demo

CIDR Block: 10.0.0.0/16

DNS Resolution: Enabled

DNS Hostnames: Disabled (recommended to enable for public DNS names)

📌 Next Suggestion: Enable DNS hostnames if you plan to launch EC2 instances with public IPs.

✅ 2. Create Subnets
Public Subnet:

Name: public

CIDR: 10.0.0.0/24

Private Subnet:

Name: private

CIDR: 10.0.1.0/24

📌 These subnets divide your VPC into public and private zones — best practice for security.

✅ 3. Create and Attach Internet Gateway
Name: igw_demo

Status: Attached to VPC demo

📌 This enables the public subnet to communicate with the internet.

✅ 4. Create NAT Gateway
Name: nat_demo

Subnet: Public subnet (10.0.0.0/24)

Purpose: Allows instances in the private subnet to access the internet without exposing them publicly.

📌 Elastic IP was automatically assigned (not visible but required for NAT Gateway).

✅ 5. Create Route Tables
a. Public Route Table
Name: public_route

Route:

0.0.0.0/0 → Target: Internet Gateway (igw_demo)

Association: Associate with the public subnet

b. Private Route Table
Route:

0.0.0.0/0 → Target: NAT Gateway (nat_demo)

Association: Associate with the private subnet

📌 This setup ensures:

Public subnet → Direct internet access

Private subnet → Internet access via NAT (for updates, downloads, etc.)

🧠 Expert Tips & Suggestions
Enable Auto-assign Public IP for the public subnet (optional if needed for EC2).

Security Groups: Next, configure security groups to:

Allow SSH (port 22) or HTTP/HTTPS (80/443) as needed

Restrict access by IP (e.g., your IP only)

Launch EC2 Instances:

In Public subnet: Choose with auto-assigned public IP (can host web server)

In Private subnet: No public IP; use NAT for outbound access

